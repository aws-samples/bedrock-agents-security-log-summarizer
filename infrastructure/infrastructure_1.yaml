AWSTemplateFormatVersion: '2010-09-09'
Description: 'Stack 1: S3, Lambda, Glue, and Athena infrastructure for Bedrock Agents Security Log Summarizer'

Resources:
  # S3 Bucket for Glue Crawled Logs
  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "glue-logs-${AWS::StackName}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  
  # S3 Bucket for Athena Query Outputs
  AthenaOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "athena-out-${AWS::StackName}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Bucket Policy for Athena Output Bucket
  AthenaOutputBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AthenaOutputBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowAthenaAccess
            Effect: Allow
            Principal:
              Service: athena.amazonaws.com
            Action:
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !GetAtt AthenaOutputBucket.Arn
              - !Sub "${AthenaOutputBucket.Arn}/*"

  # Athena Workgroup
  AthenaWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: !Sub "SecurityDemo-${AWS::StackName}-AthenaWorkgroup"
      Description: "Workgroup for security log queries"
      State: ENABLED
      WorkGroupConfiguration:
        ResultConfiguration:
          OutputLocation: !Sub "s3://${AthenaOutputBucket}/"

  # Glue Database
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Sub "demo-securitylogsummarizer-${AWS::StackName}"
        Description: "Database for security logs"

  # Glue Crawler IAM Role
  GlueCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${LogsBucket}/*"
                  - !GetAtt LogsBucket.Arn

  # Glue Crawler
  GlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub "SecurityLogsCrawler-${AWS::StackName}"
      Role: !GetAtt GlueCrawlerRole.Arn
      DatabaseName: !Ref GlueDatabase
      Targets:
        S3Targets:
          - Path: !Sub "s3://${LogsBucket}/"
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: LOG

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AthenaAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - athena:StartQueryExecution
                  - athena:GetQueryExecution
                  - athena:GetQueryResults
                  - athena:StopQueryExecution
                  - athena:GetWorkGroup
                  - athena:ListQueryExecutions
                  - athena:GetQueryResultsStream
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:CreateBucket
                  - s3:GetBucketVersioning
                Resource:
                  - !Sub "arn:aws:s3:::${AthenaOutputBucket}/*"
                  - !GetAtt AthenaOutputBucket.Arn
                  - !Sub "arn:aws:s3:::${LogsBucket}/*"
                  - !GetAtt LogsBucket.Arn
              - Effect: Allow
                Action:
                  - glue:GetDatabase
                  - glue:GetTable
                  - glue:GetPartitions
                  - glue:GetTables
                Resource: "*"

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      # No explicit FunctionName - let CloudFormation generate unique name
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: YOUR-LAMBDA-CODE-BUCKET
        S3Key: lambda_function.zip
      Timeout: 30
      Environment:
        Variables:
          GLUE_DATABASE: !Ref GlueDatabase
          TABLE: !Sub 
            - "glue_logs_${StackNameUnderscore}"
            - StackNameUnderscore: !Join ['_', !Split ['-', !Ref 'AWS::StackName']]
          OUTPUT_LOCATION: !Sub "s3://${AthenaOutputBucket}/"
          ATHENA_WORKGROUP: !Ref AthenaWorkgroup
          BEDROCK_AGENT_ACTION_GROUP: "QueryAthenaSecurityLogs"

  # Lambda Permission for Bedrock (to be used by Stack 2)
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

Outputs:
  LogsBucketName:
    Description: "Name of the S3 bucket for logs"
    Value: !Ref LogsBucket
    Export:
      Name: !Sub "${AWS::StackName}-LogsBucket"

  AthenaOutputBucketName:
    Description: "Name of the S3 bucket for Athena outputs"
    Value: !Ref AthenaOutputBucket
    Export:
      Name: !Sub "${AWS::StackName}-AthenaOutputBucket"

  LambdaFunctionName:
    Description: "Name of the Lambda function"
    Value: !Ref LambdaFunction
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunction"

  LambdaFunctionArn:
    Description: "ARN of the Lambda function"
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionArn"

  GlueDatabaseName:
    Description: "Name of the Glue Database"
    Value: !Ref GlueDatabase
    Export:
      Name: !Sub "${AWS::StackName}-GlueDatabase"

  AthenaWorkgroupName:
    Description: "Name of the Athena Workgroup"
    Value: !Ref AthenaWorkgroup
    Export:
      Name: !Sub "${AWS::StackName}-AthenaWorkgroup"
